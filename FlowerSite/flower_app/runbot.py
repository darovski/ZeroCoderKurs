from django.core.management.base import BaseCommand
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import logging
from models import Product, Cart

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞ –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞'

    def handle(self, *args, **options):
        from django.conf import settings

        updater = Updater(settings.TELEGRAM_BOT_TOKEN)
        dispatcher = updater.dispatcher

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        def main_menu():
            keyboard = [
                [InlineKeyboardButton("üåπ –í—Å–µ —Ç–æ–≤–∞—Ä—ã", callback_data='products')],
                [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data='cart')],
                [InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='orders')],
                [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')],
            ]
            return InlineKeyboardMarkup(keyboard)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        def start(update, context):
            user = update.effective_user
            update.message.reply_text(
                f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
                "–Ø –±–æ—Ç —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ üå∏\n"
                "–ú–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥, –ø–æ–º–æ—á—å —Å –∑–∞–∫–∞–∑–æ–º –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ–± –∞–∫—Ü–∏—è—Ö.",
                reply_markup=main_menu()
            )

        def show_products(update, context):
            query = update.callback_query
            query.answer()

            products = Product.objects.all()
            keyboard = []

            for i in range(0, len(products), 2):
                row = []
                for product in products[i:i + 2]:
                    row.append(InlineKeyboardButton(
                        product.name,
                        callback_data=f'product_{product.id}'
                    ))
                keyboard.append(row)

            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')])

            query.edit_message_text(
                text="–í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

        def show_product(update, context):
            query = update.callback_query
            query.answer()

            product_id = query.data.split('_')[1]
            product = Product.objects.get(id=product_id)

            keyboard = [
                [InlineKeyboardButton("‚ûï –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f'add_{product.id}')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='products')],
            ]

            try:
                context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=open(product.image.path, 'rb'),
                    caption=f"üå∏ *{product.name}*\n\n"
                            f"üíµ –¶–µ–Ω–∞: *{product.price} —Ä—É–±.*\n\n"
                            f"{product.description}",
                    parse_mode='Markdown',
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except Exception as e:
                logger.error(f"Error sending photo: {e}")
                query.edit_message_text(
                    text=f"üå∏ *{product.name}*\n\n"
                         f"üíµ –¶–µ–Ω–∞: *{product.price} —Ä—É–±.*\n\n"
                         f"{product.description}",
                    parse_mode='Markdown',
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )

        def add_to_cart(update, context):
            query = update.callback_query
            product_id = query.data.split('_')[1]

            user_id = update.effective_user.id
            cart, created = Cart.objects.get_or_create(user_id=user_id)

            product = Product.objects.get(id=product_id)
            cart.products.add(product)

            query.answer(f"{product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É")

        def show_cart(update, context):
            query = update.callback_query
            query.answer()

            user_id = update.effective_user.id
            cart = Cart.objects.filter(user_id=user_id).first()

            if not cart or not cart.products.exists():
                query.edit_message_text(
                    text="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
                    reply_markup=InlineKeyboardMarkup(
                        [[InlineKeyboardButton("üõçÔ∏è –ö —Ç–æ–≤–∞—Ä–∞–º", callback_data='products')]]
                    )
                )
                return

            total = sum(product.price for product in cart.products.all())
            items_text = "\n".join(
                f"‚Ä¢ {product.name} - {product.price} —Ä—É–±."
                for product in cart.products.all()
            )

            keyboard = [
                [InlineKeyboardButton("üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='checkout')],
                [InlineKeyboardButton("üõçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data='products')],
            ]

            query.edit_message_text(
                text=f"üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞*\n\n"
                     f"{items_text}\n\n"
                     f"üíµ *–ò—Ç–æ–≥–æ: {total} —Ä—É–±.*",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

        def back_to_main(update, context):
            query = update.callback_query
            query.answer()
            query.edit_message_text(
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=main_menu()
            )

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        dispatcher.add_handler(CommandHandler('start', start))
        dispatcher.add_handler(CallbackQueryHandler(show_products, pattern='^products$'))
        dispatcher.add_handler(CallbackQueryHandler(show_product, pattern='^product_'))
        dispatcher.add_handler(CallbackQueryHandler(add_to_cart, pattern='^add_'))
        dispatcher.add_handler(CallbackQueryHandler(show_cart, pattern='^cart$'))
        dispatcher.add_handler(CallbackQueryHandler(back_to_main, pattern='^back$'))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        def error_handler(update, context):
            logger.error(msg="–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:", exc_info=context.error)
            if update.callback_query:
                update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            else:
                update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

        dispatcher.add_error_handler(error_handler)

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        self.stdout.write(self.style.SUCCESS('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...'))
        updater.start_polling()
        updater.idle()